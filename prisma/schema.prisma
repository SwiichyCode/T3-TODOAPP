generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  role            String            @default("user")
  accounts        Account[]
  posts           Post[]
  sessions        Session[]
  tasks           Task[]
  workspaces      Workspace[]
  WorkspaceMember WorkspaceMember[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id          Int      @id @default(autoincrement())
  name        String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Workspace {
  id          Int               @id @default(autoincrement())
  name        String
  type        String
  description String?
  logo        String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdById String
  slug        String?
  createdBy   User              @relation(fields: [createdById], references: [id])
  members     WorkspaceMember[]

  @@index([name])
}

model WorkspaceMember {
  workspaceId Int
  userId      String
  role        String    @default("MEMBER")
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@id([workspaceId, userId])
}
